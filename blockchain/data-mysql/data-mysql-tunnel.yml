##Deployment部署文件
apiVersion: apps/v1     #接口版本
kind: Deployment        #接口类型
metadata:
  name: mysql-tunnel        #depolymet名称
  namespace: token-mysql    #命名空间
  labels:
    app: mysql-tunnel       #标签
spec:
  selector:
    matchLabels:
      app: mysql-tunnel
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0     #更新时候最大无效pod数量
      maxSurge: 1           #更新时候每次最多增加pod数量
  template:
    metadata:
      labels:
        app: mysql-tunnel       #模板名称必填
    spec:                   #定义容器模板，该模板可以包含多个容器
      containers:
      - name: mysql-tunnel      #镜像名称
        image: gcr.io/rd-test-64435/chain_tunnel:v23.6.26.11
        #如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。
        #如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。
        #如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。
        imagePullPolicy: IfNotPresent  #如果不存在则拉取
        ports:           
        - containerPort: 10001    #对service暴露端口
        env:        ##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量
        - name: PrivateKey
          valueFrom:
            secretKeyRef:
              name: tunnel-key
              key: key
        volumeMounts:   #挂载volumes中定义的磁盘
        - name: settings
          mountPath: /app/appsettings.json
          subPath: appsettings.json
      volumes:
      - name: settings
        secret:
          secretName: tunnel-settings           #配置文件名称
---
#定义对外访问的服务名字和端口
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc            #服务名字
  namespace: token-mysql         #命名空间
spec:
  selector:
    app: mysql-tunnel           #        
  type: NodePort
  ports:
  - protocol: TCP   
    port: 3306  
    targetPort: 10001
    name: dbport
